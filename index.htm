<!DOCTYPE HTML>
<html>
<head>
<title>Stocks</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="style.css">
<style>

</style>
<body>

<table>
<thead>
  <th></th>
  <th>Cash</th>
  <th>Wool</th>
  <th>Gold</th>
</thead>
<tbody>
  <tr>
  <th>You</th>
  <td class="js-my-cash"></td>
  <td class="js-my-wool"></td>
  <td class="js-my-gold"></td>
  </tr>
</tbody>
</table>

<table>
<thead>

</thead>
<tbody>
  <tr class="js-row-wool">
  </tr>
  <tr class="js-row-gold">
  </tr>
</tbody>
</table>

<div class="bottom">
  <button onclick="checkReset()">Reset</button>
</div>

<script src="dom.js"></script>
<script src="model.js"></script>
<script>
const my = "js-my-";
var model = {};

function reset()
{
  localStorage.clear();
  model = newModel();
  window.location.reload();
}

function checkReset()
{
  var doReset = confirm(
    "This will reset everything. Your cash, stocks, unlocks, and loot will all go back to their starting values. Are you sure?");
  if (doReset) { reset(); }
}

function setup()
{
  modelJson = localStorage.getItem('model');
  
  if (modelJson) {
    model = JSON.parse(modelJson);
  }
  else
  {
    model = newModel();
  }

  tick();
  setInterval(tick, 1000);
}

setup();

function isUnlocked(featureName)
{
  var feature = model
    .unlocks
    .filter(u => u.name === featureName)[0];

  return feature.unlocked;
}

function shouldUnlock(featureName)
{
  var feature = model
    .unlocks
    .filter(u => u.name === featureName)[0];

  return (model.player.cash > feature.from);
}

function trackUnlocks()
{
  for (var feature of model.unlocks)
  {
    feature.unlocked = feature.unlocked
      || shouldUnlock(feature.name);
  }
}

function r(resourceName)
{
  return model
    .resources
    .filter(r => r.name === resourceName)[0];
}

function buy(resourceName, qty)
{
  qty = qty || 1;
  var resource = r(resourceName);
  var totalPrice = resource.price * qty;
  if (model.player.cash >= totalPrice)
  {
    model.player.cash = (model.player.cash - totalPrice).toFixed(2);
    model
      .player
      .portfolio[resourceName] += qty;
  }
  drawAll();
}

function canBuy(resourceName, qty)
{
  qty = qty || 1;
  var resource = r(resourceName);
  return model.player.cash >= (resource.price * qty);
}

function sell(resourceName, qty)
{
  qty = qty || 1;
  var resource = r(resourceName);
  var totalPrice = resource.price * qty;
  var stock = model
      .player
      .portfolio[resourceName];

  if (stock > 0)
  {
    model
      .player
      .portfolio[resourceName] -= qty;

    model.player.cash = (1 * model.player.cash + totalPrice).toFixed(2);

  }
  drawAll();
}

function canSell(resourceName, qty)
{
  qty = qty || 1;
  var stock = (1 * model.player.portfolio[resourceName]);
  return stock >= qty;
}

function trackChanges()
{
  var cashDecimal = 1 * model.player.cash;
  if (cashDecimal > 1 * model.player.peakCash)
  {
    model.player.peakCash = cashDecimal;
  }
  trackUnlocks()
}

function tick()
{
  // console.log("tick")
  for(var resource of model.resources)
  {
    var change = resource.inherentValue - (Math.random() * resource.inherentValue * 2);
    resource.price += change;
    if (resource.price < resource.inherentValue)
    {
      resource.price = resource.inherentValue;
    }
    resource.price = resource.price.toFixed(2) * 1;
    // console.log(resource.name, resource.price);
  }

  save();
  drawAll()
}

function save()
{
  var json = JSON.stringify(model);
  localStorage.setItem('model', json);
}

function drawAll()
{
  trackChanges();
  for(var resource of model.resources)
  {
    draw(resource);
  }
  drawPlayer(model.player);
}

function draw(resource)
{
  var buyClick = "buy('" + resource.name + "', 1)";
  var buy10Click = "buy('" + resource.name + "', 10)";
  var buyBtns = btn('Buy', buyClick, canBuy(resource.name));
  if (isUnlocked('buy10'))
  {
    buyBtns += btn('Buy 10', buy10Click, canBuy(resource.name, 10));
  }
  
  var sellClick = "sell('" + resource.name + "', 1)";
  var sell10Click = "sell('" + resource.name + "', 10)";
  var sellBtns = btn('Sell', sellClick, canSell(resource.name));
  if (isUnlocked('sell10'))
  {
    sellBtns += btn('Sell 10', sell10Click, canSell(resource.name, 10));
  }
  
  var content = td(resource.name)
    + td(money(resource.price))
    + td(buyBtns)
    + td(sellBtns);
  
  var className = "js-row-" + resource.name;
  var targetRow = c(className);
  targetRow.innerHTML = content;
}

function btn(content, onclickFn, isEnabled)
{
  var attr = enabledAttribute(isEnabled);
  var onclickFn = "onclick=\"" + onclickFn + "\"";
  return "<button "
    + attr + " "
	+ onclickFn + ">"
	+ content + "</button>";
}

function drawPlayer(player)
{
  var cashCell = c(my + 'cash');
  cashCell.innerHTML = 
	p(money(player.cash))
	+ p(small(money(player.peakCash)));
	
  drawPortfolioCell('wool');
  drawPortfolioCell('gold');
}

function drawPortfolioCell(resourceName)
{
  var cell = c(my + resourceName);
  var qty = model.player.portfolio[resourceName];
  cell.innerHTML =
    p(qty)
    + p(small(money(valueOf(resourceName, qty))));
}

function valueOf(resourceName, qty)
{
  var price = 1 * model
    .resources
    .filter(r => r.name === resourceName)[0]
    .price;

  return price * qty;
}

function cheatSetCash(cash)
{
  model.player.cash = cash;
}

</script>
</body>
</html>