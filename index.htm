<!DOCTYPE HTML>
<html>
<head>
<title>Stocks</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
html
{
  font-family: sans-serif;
}
td, th
{
  padding: 5px;
  width: 3.6em;
  text-transform: capitalize;
}
td
{
  border: 1px solid gray;
}
th
{
  
}
table
{
  border-collapse: collapse;
  margin: 5px 0;
}
button
{
  width: 100%;
}
p
{
  margin: 2px;
}
small
{
  font-weight: bold;
  color: gray;
}
</style>
<body>

<table>
<thead>
  <th></th>
  <th>Cash</th>
  <th>Wool</th>
  <th>Gold</th>
</thead>
<tbody>
  <tr>
  <th>You</th>
  <td class="js-my-cash"></td>
  <td class="js-my-wool"></td>
  <td class="js-my-gold"></td>
  </tr>
</tbody>
</table>

<table>
<thead>

</thead>
<tbody>
  <tr class="js-row-wool">
  </tr>
  <tr class="js-row-gold">
  </tr>
</tbody>
</table>

<script>
const my = "js-my-";
var model = {};

function reset()
{
  localStorage.clear();
  model = newModel();
  window.location.reload();
}

function setup()
{
  modelJson = localStorage.getItem('model');
  
  if (modelJson) {
    model = JSON.parse(modelJson);
  }
  else
  {
    model = newModel();
  }

  tick();
  setInterval(tick, 1000);
}

setup();

function newModel()
{
	console.log("newModel");
	return {
	  theme : 'light',
	  player : {
		cash : 90,
		peakCash : 90,
		portfolio : {
		  'wool' : 0,
		  'gold' : 0
		}
	  },
	  resources : [
		{ name : 'wool',
		  price : 10,
		  inherentValue : 1
		},
		{ name : 'gold',
		  price : 100,
		  inherentValue : 10
		}
	  ],
	  unlocks : [
		{
		  type : 'button',
		  from : 1000,
		  name : 'buy10',
		  unlocked : false
		},
		{
		  type : 'button',
		  from : 1000,
		  name : 'sell10',
		  unlocked : false
		},
		{
		  type : 'button',
		  from : 10000,
		  name : 'buyAll',
		  unlocked : false
		},
		{
		  type : 'button',
		  from : 10000,
		  name : 'sellAll',
		  unlocked : false
		},
		{
		  type : 'button',
		  from : 20000,
		  name : 'short',
		  unlocked : false
		}
	  ]
	};
}

function isUnlocked(featureName)
{
  var feature = model
    .unlocks
    .filter(u => u.name === featureName)[0];

  return feature.unlocked;
}

function shouldUnlock(featureName)
{
  var feature = model
    .unlocks
    .filter(u => u.name === featureName)[0];

  return (model.player.cash > feature.from);
}

function trackUnlocks()
{
  for (var feature of model.unlocks)
  {
    feature.unlocked = feature.unlocked
      || shouldUnlock(feature.name);
  }
}

function r(resourceName)
{
  return model
    .resources
    .filter(r => r.name === resourceName)[0];
}

function buy(resourceName)
{
  var resource = r(resourceName);
  if (model.player.cash >= resource.price)
  {
    model.player.cash = (model.player.cash - resource.price).toFixed(2);
    model
      .player
      .portfolio[resourceName] += 1
  }
  drawAll()
}

function canBuy(resourceName)
{
  var resource = r(resourceName);
  return model.player.cash >= resource.price;
}

function sell(resourceName)
{
  var resource = r(resourceName);
  var stock = model
      .player
      .portfolio[resourceName]

  if (stock > 0)
  {
    model
      .player
      .portfolio[resourceName] -= 1;

    model.player.cash = (1 * model.player.cash + 1 * resource.price).toFixed(2);

  }
  drawAll()
}

function canSell(resourceName)
{
  return model.player.portfolio[resourceName] > 0
}

function trackChanges()
{
  var cashDecimal = 1 * model.player.cash;
  if (cashDecimal > 1 * model.player.peakCash)
  {
    model.player.peakCash = cashDecimal;
  }
  trackUnlocks()
}

function tick()
{
  // console.log("tick")
  for(var resource of model.resources)
  {
    var change = resource.inherentValue - (Math.random() * resource.inherentValue * 2);
    resource.price += change;
    if (resource.price < resource.inherentValue)
    {
      resource.price = resource.inherentValue;
    }
    resource.price = resource.price.toFixed(2) * 1;
    // console.log(resource.name, resource.price);
  }

  save();
  drawAll()
}

function save()
{
  var json = JSON.stringify(model);
  localStorage.setItem('model', json);
}

function drawAll()
{
  trackChanges();
  for(var resource of model.resources)
  {
    draw(resource);
  }
  drawPlayer(model.player);
}

function draw(resource)
{
  var cell1 = td(resource.name);
  var cell2 = td(money(resource.price));

  var buyAttribute =
    enabledAttribute(canBuy(resource.name));

  var buyBtns = "<button "
    + buyAttribute 
    + " onclick=\"buy('"
    + resource.name + "')\">Buy</button>";
  var buyCell = td(buyBtns);

  var sellAttribute =
    enabledAttribute(canSell(resource.name));

  var sellBtns = "<button "
    + sellAttribute
	+ " onclick=\"sell('"
    + resource.name + "')\">Sell</button>";
  var sellCell = td(sellBtns);

  var content = cell1 + cell2 + buyCell + sellCell;
  var className = "js-row-" + resource.name;
  var targetRow = c(className);
  targetRow.innerHTML = content;
}

function enabledAttribute(enabled)
{
  if (enabled)
  {
    return '';
  }
  return 'disabled="disabled"';
}

function drawPlayer(player)
{
  var cashCell = c(my + 'cash');
  cashCell.innerHTML = 
	p(money(player.cash))
	+ p(small(money(player.peakCash)));
	
  drawPortfolioCell('wool');
  drawPortfolioCell('gold');
}

function drawPortfolioCell(resourceName)
{
  var cell = c(my + resourceName);
  var qty = model.player.portfolio[resourceName];
  cell.innerHTML =
    p(qty)
    + p(small(money(valueOf(resourceName, qty))));
}

function valueOf(resourceName, qty)
{
  var price = 1 * model
    .resources
    .filter(r => r.name === resourceName)[0]
    .price;

  return price * qty;
}

function money(x)
{
  return '&pound;' + (1 * x).toFixed(2);
}

function c(q)
{
  return document.getElementsByClassName(q)[0];
}

function td(html)
{
  return "<td>" + html + "</td>";
}

function p(html)
{
  return "<p>" + html + "</p>";
}

function small(html)
{
  return "<small>" + html + "</small>";
}

function setCashCheat(cash)
{
  model.player.cash = cash;
}

</script>
</body>
</html>